
코딩 스탠다드

클래스 명명은 라이브러리의 경우 클래스 + 성격 + 기능( 명사 )로,
  프로젝트의 경우 프로젝트 명 + 성격 + 기능 순으로 작명합니다.

	- 라이브러리 : C (Class) 성격 ( Manager(싱글톤), Component(단일 객체로서 기능을 발휘) ) ( 기능 + (er) )
		= CManagerNetworkUDP	: C = 클래스 , Manager = 싱글톤 , Network UDP - UDP 기능 관련
		= CCompoAddForce		: C = 클래스 , Compo = 단일 객체로서 기능을 발휘 , AddForce - AddForce 기능 관련 

	- 프로젝트 : 프로젝트 이니셜 코드 2글자 + 성격 ( Manager(싱글톤), Component(단일 객체로서 기능을 발휘) ) ( 기능 + (er) )
		= 프로젝트 명이 SingVR의 경우			: SV
		= 프로젝트 명이 ZiwooShooting의 경우  : ZS

클래스가 abstract 혹은 상속을 통해서 재기능을 발휘해야 할 경우 접미어로 Base를 붙입니다.

	- CManagerFrameWorkBase
	- CSingletonMonoBase

변수 명명은 헝가리안을 기반으로 하지만, 유니티 C#에만 있는 경우 조금 변경된 스타일로 작성합니다.

	- 기본형의 경우 ( 유니티 C# 기준 )
		int : i, string : str, Vector : vec, bool : b

	- Class, Struct의 경우
		pSomthingClass, pSomthingStruct

	- 멤버 변수의 경우
		_iSomthingInt, _pSomthingStruct

자료구조나 디자인 패턴 등의 기존 소프트웨어 단어를 사용하면 그 단어를 포함합니다.

	- FSM을 사용한 클래스의 경우
		CFSM_PlayerStatus, CState_PlayerIdle

	- Singleton을 사용한 클래스의 경우
		CSingletonMonoBase

	- List, Stack 등의 경우
		= List<int> listSomthing
		= Stack<int> stackSomthing

	- Dictionary 의 경우 예외로 map을 사용합니다.
		Dictionary<int, int> mapSomthing


프로퍼티의 경우 p_ + 변수 명명법으로 작성합니다.

외부에 노출되는 변수는 되도록이면 프로퍼티로 작성합니다.

```

// public int iMinute;
public int p_iMinute { get; protected set; } 

```


public Getter의 경우 함수보다 되도록이면 프로퍼티로 작성합니다.

```

// public int GetMinute();
public int p_iMinute { get; protected set; } 

```

메소드 이름은 접두어가 있는경우 접두어부터 + 동사 + 명사 순으로 작명합니다.

	ㄱ. public 함수의 경우 접두어 Do
		DoPlayEffect, DoPlaySound 등

	ㄴ. non-public Getter, Setter 함수의 경우
		GetSomthing, SetSomthing 

	ㄷ. 후크 혹은 이벤트 함수의 경우 접두어 On
		OnClickButton, OnPressButton

	ㄹ. 그 외 protected & private의 경우
		Process_Somthing


var는 반복문과 그에 관련된 작업에만 되도록 작성합니다.

상수는 const_ + 변수 명명법으로 작성합니다.

매직넘버를 쓰지 말고 상수를 선언합니다.

```

{
	// int iClockMaximum = 24;

	const int const_iClockMaximum;
	int iClockMaximum = const_iClockMaximum;
}

```


인터페이스의 명명법의 경우 I (Interface)를 붙이며, 변수는 p로 작성합니다.

인터페이스를 상속받는 함수의 경우 해당 인터페이스 타입명을 접두어로 붙입니다.

```

	interface IClockListener
	{
		void IClockListener_OnChangeClock(int iHour, int iMinute);
	}

```

Enum의 명명법의 경우 E (Enum)을 붙이며, 변수는 e로 작성합니다.

Enum Flag의 경우 형식 명에 Flag를 포함해야 합니다. 변수 역시 Flag를 접미어로 붙입니다.

```

	[System.Flags]
	enum EExportTypeFlags
	{
		CSV,
		TXT,
		DB
	}

	EExportTypeFlags _eExportTypeFlags;

```


Delegate의 명명법의 경우 On + 기능으로 작명합니다.

event 명명법의 경우 p_Event_ + 기능으로 작명합니다.

```

	delegate void OnChangeClock(int iHour, int iMinute);

	event OnChangeClock p_Event_OnChangeClock;

```


두개의 문자 이상인 경우 머리글자로 된 첫 번째 문자만 대문자로 표시합니다.

	ㄱ. iSessionCount


클래스, 변수, 메소드의 순서는 규약에 있는 포멧을 지킵니다.

메소드 전개 중, 메소드 내부에 체크가 필요할 시 체크부터 전개 후 리턴합니다. ( 중괄호를 최대한 줄입니다. )

```

void Process_Clock(int iHour, int iMinute)
{
	if(iHour > 24 || iMinute > 60)
		return;

	Process_Clock_Hour(iHour);
	Process_Clock_Minute(iMinute);
}

```


함수에서 Null을 리턴하는 경우 접미어로 _OrNull을 붙입니다.

	ㄱ. GetSomthing_OrNull()

참고 목록
- 포프님 코딩 스탠다드 (한글 번역): http://lonpeach.com/2017/12/24/CSharp-Coding-Standard/#1-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%8F-%EA%B5%AC%EC%A1%B0%EC%B2%B4%EC%97%90-%ED%8C%8C%EC%8A%A4%EC%B9%BC-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%82%AC%EC%9A%A9
- 포프님 코딩 스탠다드 (원문)	 : https://docs.google.com/document/d/1ymFFTVpR4lFEkUgYNJPRJda_eLKXMB6Ok4gpNWOo4rc/edit